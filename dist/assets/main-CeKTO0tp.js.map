{"version":3,"file":"main-CeKTO0tp.js","sources":["../../src/scripts/components/navigation.ts","../../src/scripts/components/animations.ts","../../src/scripts/components/contact-form.ts","../../src/scripts/utils/analytics.ts","../../src/scripts/utils/performance.ts","../../src/scripts/main.ts"],"sourcesContent":["// Navigation functionality\nexport class Navigation {\n  private navLinks: NodeListOf<HTMLAnchorElement>\n  private sections: NodeListOf<HTMLElement>\n\n  constructor() {\n    this.navLinks = document.querySelectorAll('.nav__link')\n    this.sections = document.querySelectorAll('section[id]')\n    this.init()\n  }\n\n  private init(): void {\n    this.setupSmoothScrolling()\n    this.setupActiveNavigation()\n  }\n\n  private setupSmoothScrolling(): void {\n    this.navLinks.forEach(link => {\n      link.addEventListener('click', (e) => {\n        e.preventDefault()\n        const href = link.getAttribute('href')\n        \n        if (href?.startsWith('#')) {\n          const target = document.querySelector(href)\n          \n          if (target) {\n            target.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start'\n            })\n            \n            // Update URL without triggering page reload\n            history.pushState(null, '', href)\n          }\n        }\n      })\n    })\n  }\n\n  private setupActiveNavigation(): void {\n    const observerOptions: IntersectionObserverInit = {\n      rootMargin: '-50px 0px -50px 0px',\n      threshold: 0.1\n    }\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const id = entry.target.id\n          this.updateActiveNavLink(id)\n        }\n      })\n    }, observerOptions)\n\n    this.sections.forEach(section => {\n      observer.observe(section)\n    })\n  }\n\n  private updateActiveNavLink(activeId: string): void {\n    this.navLinks.forEach(link => {\n      link.classList.remove('nav__link--active')\n      \n      if (link.getAttribute('href') === `#${activeId}`) {\n        link.classList.add('nav__link--active')\n      }\n    })\n  }\n}\n\n// Initialize navigation\nnew Navigation() ","// Animation controller for scroll-triggered reveals\nexport class AnimationController {\n  private observer!: IntersectionObserver\n  private animatedElements: NodeListOf<Element>\n\n  constructor() {\n    this.animatedElements = document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right, .card, .terminal, .skill-category, .achievement-card')\n    this.init()\n  }\n\n  private init(): void {\n    const observerOptions: IntersectionObserverInit = {\n      threshold: 0.1,\n      rootMargin: '0px 0px -50px 0px'\n    }\n\n    this.observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          this.animateElement(entry.target as HTMLElement)\n          this.observer.unobserve(entry.target)\n        }\n      })\n    }, observerOptions)\n\n    this.observeElements()\n  }\n\n  private observeElements(): void {\n    this.animatedElements.forEach(element => {\n      this.observer.observe(element)\n    })\n  }\n\n  private animateElement(element: HTMLElement): void {\n    // Add appropriate animation classes\n    if (element.classList.contains('fade-in')) {\n      element.classList.add('fade-in--visible')\n    }\n    \n    if (element.classList.contains('slide-in-left')) {\n      element.classList.add('slide-in-left--visible')\n    }\n    \n    if (element.classList.contains('slide-in-right')) {\n      element.classList.add('slide-in-right--visible')\n    }\n\n    // For cards and other elements, just make them visible\n    if (element.classList.contains('card') || \n        element.classList.contains('terminal') ||\n        element.classList.contains('skill-category') ||\n        element.classList.contains('achievement-card')) {\n      element.style.opacity = '1'\n      element.style.transform = 'translateY(0)'\n    }\n\n    // Add staggered delay for grid items\n    this.addStaggeredAnimation(element)\n  }\n\n  private addStaggeredAnimation(element: HTMLElement): void {\n    const parent = element.parentElement\n    if (!parent) return\n\n    const siblings = Array.from(parent.children).filter(child => \n      child.classList.contains('card') || \n      child.classList.contains('achievement-card') ||\n      child.classList.contains('skill-category')\n    )\n\n    const index = siblings.indexOf(element)\n    if (index !== -1) {\n      element.style.transitionDelay = `${index * 100}ms`\n    }\n  }\n\n  // Public method to trigger animations manually\n  public triggerAnimation(selector: string): void {\n    const elements = document.querySelectorAll(selector)\n    elements.forEach(element => {\n      this.animateElement(element as HTMLElement)\n    })\n  }\n}\n\n// Initialize animations\nnew AnimationController() ","// Contact form functionality\nexport class ContactForm {\n  private form: HTMLFormElement | null\n  private submitButton: HTMLButtonElement | null\n  private originalButtonText: string\n\n  constructor() {\n    this.form = document.querySelector('.contact-form')\n    this.submitButton = this.form?.querySelector('button[type=\"submit\"]') || null\n    this.originalButtonText = this.submitButton?.textContent || 'Send Message'\n    this.init()\n  }\n\n  private init(): void {\n    if (!this.form) return\n\n    this.form.addEventListener('submit', this.handleSubmit.bind(this))\n    this.setupValidation()\n  }\n\n  private setupValidation(): void {\n    if (!this.form) return\n\n    const inputs = this.form.querySelectorAll('input, textarea')\n    inputs.forEach(input => {\n      input.addEventListener('blur', () => this.validateField(input as HTMLInputElement))\n      input.addEventListener('input', () => this.clearFieldError(input as HTMLInputElement))\n    })\n  }\n\n  private validateField(field: HTMLInputElement): boolean {\n    const value = field.value.trim()\n    let isValid = true\n    let errorMessage = ''\n\n    // Remove existing error styles\n    this.clearFieldError(field)\n\n    // Required field validation\n    if (field.required && !value) {\n      isValid = false\n      errorMessage = `${this.getFieldLabel(field)} is required`\n    }\n\n    // Email validation\n    if (field.type === 'email' && value) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(value)) {\n        isValid = false\n        errorMessage = 'Please enter a valid email address'\n      }\n    }\n\n    // Name validation (no numbers)\n    if (field.name === 'name' && value) {\n      const nameRegex = /^[a-zA-Z\\s'-]+$/\n      if (!nameRegex.test(value)) {\n        isValid = false\n        errorMessage = 'Name should only contain letters, spaces, hyphens, and apostrophes'\n      }\n    }\n\n    // Message minimum length\n    if (field.name === 'message' && value && value.length < 10) {\n      isValid = false\n      errorMessage = 'Message should be at least 10 characters long'\n    }\n\n    if (!isValid) {\n      this.showFieldError(field, errorMessage)\n    }\n\n    return isValid\n  }\n\n  private getFieldLabel(field: HTMLInputElement): string {\n    const label = this.form?.querySelector(`label[for=\"${field.id}\"]`)\n    return label?.textContent || field.name || 'Field'\n  }\n\n  private showFieldError(field: HTMLInputElement, message: string): void {\n    field.classList.add('error')\n    \n    // Remove existing error message\n    const existingError = field.parentElement?.querySelector('.error-message')\n    if (existingError) {\n      existingError.remove()\n    }\n\n    // Add new error message\n    const errorElement = document.createElement('div')\n    errorElement.className = 'error-message'\n    errorElement.textContent = message\n    errorElement.style.color = 'var(--color-error, #ff5f56)'\n    errorElement.style.fontSize = 'var(--font-size-sm)'\n    errorElement.style.marginTop = 'var(--spacing-xs)'\n    \n    field.parentElement?.appendChild(errorElement)\n  }\n\n  private clearFieldError(field: HTMLInputElement): void {\n    field.classList.remove('error')\n    const errorMessage = field.parentElement?.querySelector('.error-message')\n    if (errorMessage) {\n      errorMessage.remove()\n    }\n  }\n\n  private async handleSubmit(e: Event): Promise<void> {\n    e.preventDefault()\n    \n    if (!this.form || !this.submitButton) return\n\n    // Validate all fields\n    const inputs = this.form.querySelectorAll('input, textarea') as NodeListOf<HTMLInputElement>\n    let isFormValid = true\n\n    inputs.forEach(input => {\n      if (!this.validateField(input)) {\n        isFormValid = false\n      }\n    })\n\n    if (!isFormValid) {\n      this.showFormMessage('Please fix the errors above', 'error')\n      return\n    }\n\n    // Show loading state\n    this.setLoadingState(true)\n\n    try {\n      const formData = new FormData(this.form)\n      const response = await fetch(this.form.action, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json'\n        }\n      })\n\n      if (response.ok) {\n        this.showFormMessage('Thank you! Your message has been sent successfully.', 'success')\n        this.form.reset()\n        this.trackFormSubmission('success')\n      } else {\n        throw new Error('Form submission failed')\n      }\n    } catch (error) {\n      console.error('Form submission error:', error)\n      this.showFormMessage('Sorry, there was an error sending your message. Please try again.', 'error')\n      this.trackFormSubmission('error')\n    } finally {\n      this.setLoadingState(false)\n    }\n  }\n\n  private setLoadingState(loading: boolean): void {\n    if (!this.submitButton) return\n\n    if (loading) {\n      this.submitButton.disabled = true\n      this.submitButton.textContent = 'Sending...'\n      this.submitButton.classList.add('loading')\n    } else {\n      this.submitButton.disabled = false\n      this.submitButton.textContent = this.originalButtonText\n      this.submitButton.classList.remove('loading')\n    }\n  }\n\n  private showFormMessage(message: string, type: 'success' | 'error'): void {\n    // Remove existing message\n    const existingMessage = this.form?.querySelector('.form-message')\n    if (existingMessage) {\n      existingMessage.remove()\n    }\n\n    // Create new message\n    const messageElement = document.createElement('div')\n    messageElement.className = `form-message form-message--${type}`\n    messageElement.textContent = message\n    messageElement.style.padding = 'var(--spacing-sm)'\n    messageElement.style.borderRadius = 'var(--border-radius-sm)'\n    messageElement.style.marginTop = 'var(--spacing-md)'\n    messageElement.style.textAlign = 'center'\n    \n    if (type === 'success') {\n      messageElement.style.backgroundColor = 'rgba(39, 202, 63, 0.1)'\n      messageElement.style.color = '#27ca3f'\n      messageElement.style.border = '1px solid #27ca3f'\n    } else {\n      messageElement.style.backgroundColor = 'rgba(255, 95, 86, 0.1)'\n      messageElement.style.color = '#ff5f56'\n      messageElement.style.border = '1px solid #ff5f56'\n    }\n\n    this.form?.appendChild(messageElement)\n\n    // Auto-remove success messages after 5 seconds\n    if (type === 'success') {\n      setTimeout(() => {\n        messageElement.remove()\n      }, 5000)\n    }\n  }\n\n  private trackFormSubmission(status: 'success' | 'error'): void {\n    // Analytics tracking - will be implemented in analytics.ts\n    if ((window as any).gtag) {\n      (window as any).gtag('event', 'form_submit', {\n        'form_name': 'contact',\n        'status': status\n      })\n    }\n  }\n}\n\n// Initialize contact form\nnew ContactForm() ","// Analytics utility for tracking user interactions\nexport class Analytics {\n  private isProduction: boolean\n\n  constructor() {\n    this.isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1'\n    this.init()\n  }\n\n  private init(): void {\n    if (this.isProduction) {\n      this.loadGoogleAnalytics()\n    }\n    this.trackPageView()\n  }\n\n  private loadGoogleAnalytics(): void {\n    // Replace with your actual GA4 measurement ID\n    const GA_MEASUREMENT_ID = 'G-XXXXXXXXXX'\n    \n    // Load Google Analytics script\n    const script = document.createElement('script')\n    script.async = true\n    script.src = `https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`\n    document.head.appendChild(script)\n\n    // Initialize gtag\n    const gtagScript = document.createElement('script')\n    gtagScript.innerHTML = `\n      window.dataLayer = window.dataLayer || [];\n      function gtag(){dataLayer.push(arguments);}\n      gtag('js', new Date());\n      gtag('config', '${GA_MEASUREMENT_ID}', {\n        page_title: document.title,\n        page_location: window.location.href\n      });\n    `\n    document.head.appendChild(gtagScript)\n  }\n\n  private trackPageView(): void {\n    this.track('page_view', {\n      page_title: document.title,\n      page_location: window.location.href\n    })\n  }\n\n  // Public method to track events\n  public track(eventName: string, parameters: Record<string, any> = {}): void {\n    if (this.isProduction && (window as any).gtag) {\n      (window as any).gtag('event', eventName, parameters)\n    } else {\n      // Development mode - log to console\n      console.log('Analytics Event:', eventName, parameters)\n    }\n  }\n\n  // Track navigation clicks\n  public trackNavigation(section: string): void {\n    this.track('navigation_click', {\n      section_name: section,\n      timestamp: new Date().toISOString()\n    })\n  }\n\n  // Track CTA button clicks\n  public trackCTA(buttonName: string, location: string): void {\n    this.track('cta_click', {\n      button_name: buttonName,\n      button_location: location,\n      timestamp: new Date().toISOString()\n    })\n  }\n\n  // Track project link clicks\n  public trackProjectClick(projectName: string, linkType: 'github' | 'demo' | 'case_study'): void {\n    this.track('project_click', {\n      project_name: projectName,\n      link_type: linkType,\n      timestamp: new Date().toISOString()\n    })\n  }\n\n  // Track contact method usage\n  public trackContact(method: 'email' | 'linkedin' | 'github' | 'phone' | 'form'): void {\n    this.track('contact_attempt', {\n      contact_method: method,\n      timestamp: new Date().toISOString()\n    })\n  }\n\n  // Track scroll depth\n  public trackScrollDepth(percentage: number): void {\n    this.track('scroll_depth', {\n      scroll_percentage: percentage,\n      page_title: document.title\n    })\n  }\n\n  // Track time spent on page\n  public trackTimeOnPage(): void {\n    const startTime = Date.now()\n    \n    window.addEventListener('beforeunload', () => {\n      const timeSpent = Math.round((Date.now() - startTime) / 1000)\n      this.track('time_on_page', {\n        time_seconds: timeSpent,\n        page_title: document.title\n      })\n    })\n  }\n}\n\n// Initialize analytics\nconst analytics = new Analytics()\n\n// Set up automatic tracking\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Track navigation clicks\n  document.querySelectorAll('.nav__link').forEach(link => {\n    link.addEventListener('click', (e) => {\n      const target = (e.target as HTMLElement)\n      const href = target.getAttribute('href')\n      if (href?.startsWith('#')) {\n        analytics.trackNavigation(href.substring(1))\n      }\n    })\n  })\n\n  // Track CTA button clicks\n  document.querySelectorAll('.btn--primary').forEach(button => {\n    button.addEventListener('click', (e) => {\n      const target = (e.target as HTMLElement)\n      const buttonText = target.textContent || 'Unknown'\n      const section = target.closest('section')?.id || 'unknown'\n      analytics.trackCTA(buttonText, section)\n    })\n  })\n\n  // Track contact link clicks\n  document.querySelectorAll('.contact-link').forEach(link => {\n    link.addEventListener('click', (e) => {\n      const target = (e.target as HTMLElement)\n      const href = target.getAttribute('href') || ''\n      \n      let method: 'email' | 'linkedin' | 'github' | 'phone' | 'form' = 'form'\n      if (href.includes('mailto:')) method = 'email'\n      else if (href.includes('linkedin')) method = 'linkedin'\n      else if (href.includes('github')) method = 'github'\n      else if (href.includes('tel:')) method = 'phone'\n      \n      analytics.trackContact(method)\n    })\n  })\n\n  // Track scroll depth\n  let maxScrollDepth = 0\n  window.addEventListener('scroll', () => {\n    const scrollTop = window.pageYOffset\n    const docHeight = document.body.offsetHeight - window.innerHeight\n    const scrollPercent = Math.round((scrollTop / docHeight) * 100)\n    \n    if (scrollPercent > maxScrollDepth && scrollPercent <= 100) {\n      maxScrollDepth = scrollPercent\n      \n      // Track at 25%, 50%, 75%, and 100%\n      if ([25, 50, 75, 100].includes(scrollPercent)) {\n        analytics.trackScrollDepth(scrollPercent)\n      }\n    }\n  })\n\n  // Track time on page\n  analytics.trackTimeOnPage()\n})\n\nexport { analytics } ","// Performance monitoring utility\nexport class PerformanceMonitor {\n  private isProduction: boolean\n\n  constructor() {\n    this.isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1'\n    this.init()\n  }\n\n  private init(): void {\n    this.measureCoreWebVitals()\n    this.trackResourceLoading()\n    this.monitorLongTasks()\n  }\n\n  private measureCoreWebVitals(): void {\n    // Largest Contentful Paint (LCP)\n    this.measureLCP()\n    \n    // First Input Delay (FID)\n    this.measureFID()\n    \n    // Cumulative Layout Shift (CLS)\n    this.measureCLS()\n  }\n\n  private measureLCP(): void {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        const lastEntry = entries[entries.length - 1] as any\n        \n        if (lastEntry) {\n          const lcp = lastEntry.startTime\n          this.reportMetric('LCP', lcp)\n          \n          // Stop observing after first meaningful paint\n          observer.disconnect()\n        }\n      })\n      \n      observer.observe({ entryTypes: ['largest-contentful-paint'] })\n    } catch (error) {\n      console.warn('LCP measurement not supported:', error)\n    }\n  }\n\n  private measureFID(): void {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          const fid = entry.processingStart - entry.startTime\n          this.reportMetric('FID', fid)\n        }\n      })\n      \n      observer.observe({ entryTypes: ['first-input'], buffered: true })\n    } catch (error) {\n      console.warn('FID measurement not supported:', error)\n    }\n  }\n\n  private measureCLS(): void {\n    try {\n      let clsValue = 0\n      let clsEntries: PerformanceEntry[] = []\n\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          // Only count unexpected layout shifts\n          if (!(entry as any).hadRecentInput) {\n            clsEntries.push(entry)\n            clsValue += (entry as any).value\n          }\n        }\n      })\n\n      observer.observe({ entryTypes: ['layout-shift'], buffered: true })\n\n      // Report CLS when page visibility changes or page unloads\n      const reportCLS = () => {\n        this.reportMetric('CLS', clsValue)\n      }\n\n      document.addEventListener('visibilitychange', reportCLS)\n      window.addEventListener('beforeunload', reportCLS)\n    } catch (error) {\n      console.warn('CLS measurement not supported:', error)\n    }\n  }\n\n  private trackResourceLoading(): void {\n    window.addEventListener('load', () => {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming\n      \n      if (navigation) {\n        // DNS lookup time\n        const dnsTime = navigation.domainLookupEnd - navigation.domainLookupStart\n        this.reportMetric('DNS_Time', dnsTime)\n        \n        // Connection time\n        const connectTime = navigation.connectEnd - navigation.connectStart\n        this.reportMetric('Connection_Time', connectTime)\n        \n        // Time to First Byte (TTFB)\n        const ttfb = navigation.responseStart - navigation.requestStart\n        this.reportMetric('TTFB', ttfb)\n        \n        // DOM Content Loaded\n        const dcl = navigation.domContentLoadedEventEnd - navigation.navigationStart\n        this.reportMetric('DCL', dcl)\n        \n        // Load Complete\n        const loadComplete = navigation.loadEventEnd - navigation.navigationStart\n        this.reportMetric('Load_Complete', loadComplete)\n      }\n    })\n  }\n\n  private monitorLongTasks(): void {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          this.reportMetric('Long_Task', entry.duration)\n        }\n      })\n      \n      observer.observe({ entryTypes: ['longtask'] })\n    } catch (error) {\n      console.warn('Long task monitoring not supported:', error)\n    }\n  }\n\n  private reportMetric(name: string, value: number): void {\n    const metric = {\n      name,\n      value: Math.round(value),\n      timestamp: Date.now(),\n      url: window.location.href\n    }\n\n    if (this.isProduction) {\n      // Send to analytics or monitoring service\n      this.sendToAnalytics(metric)\n    } else {\n      // Log to console in development\n      console.log('Performance Metric:', metric)\n    }\n  }\n\n  private sendToAnalytics(metric: any): void {\n    // Send to Google Analytics as custom event\n    if ((window as any).gtag) {\n      (window as any).gtag('event', 'web_vitals', {\n        metric_name: metric.name,\n        metric_value: metric.value,\n        custom_parameter_url: metric.url\n      })\n    }\n\n    // You could also send to other monitoring services like:\n    // - New Relic\n    // - DataDog\n    // - Sentry Performance\n    // - Your own analytics endpoint\n  }\n\n  // Public method to measure custom metrics\n  public measureCustom(name: string, startTime: number): void {\n    const endTime = performance.now()\n    const duration = endTime - startTime\n    this.reportMetric(`Custom_${name}`, duration)\n  }\n\n  // Measure paint timing\n  public measurePaintTiming(): void {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          this.reportMetric(entry.name.replace('-', '_'), entry.startTime)\n        }\n      })\n      \n      observer.observe({ entryTypes: ['paint'] })\n    } catch (error) {\n      console.warn('Paint timing not supported:', error)\n    }\n  }\n\n  // Memory usage monitoring\n  public monitorMemoryUsage(): void {\n    if ('memory' in performance) {\n      const memory = (performance as any).memory\n      \n      setInterval(() => {\n        this.reportMetric('Memory_Used', memory.usedJSHeapSize)\n        this.reportMetric('Memory_Total', memory.totalJSHeapSize)\n        this.reportMetric('Memory_Limit', memory.jsHeapSizeLimit)\n      }, 30000) // Report every 30 seconds\n    }\n  }\n}\n\n// Initialize performance monitoring\nconst performanceMonitor = new PerformanceMonitor()\n\n// Add custom performance marks for key events\ndocument.addEventListener('DOMContentLoaded', () => {\n  performance.mark('dom-content-loaded')\n  performanceMonitor.measurePaintTiming()\n})\n\nwindow.addEventListener('load', () => {\n  performance.mark('window-loaded')\n  performanceMonitor.monitorMemoryUsage()\n})\n\nexport { performanceMonitor } ","import './components/navigation'\nimport './components/animations'\nimport './components/contact-form'\nimport './utils/analytics'\nimport './utils/performance'\n\n// Initialize app when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('🚀 Portfolio loaded successfully!')\n  \n  // Add any global initialization here\n  initializeApp()\n})\n\nfunction initializeApp(): void {\n  // Set up global error handling\n  window.addEventListener('error', (event) => {\n    console.error('Global error:', event.error)\n    // In production, you could send this to an error tracking service\n  })\n\n  // Set up global unhandled promise rejection handling\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason)\n    event.preventDefault()\n  })\n\n  // Add smooth scrolling polyfill for older browsers\n  if (!('scrollBehavior' in document.documentElement.style)) {\n    console.log('Adding smooth scroll polyfill for older browsers')\n    // Polyfill would be implemented here if needed\n  }\n\n  // Initialize intersection observer for animations\n  if ('IntersectionObserver' in window) {\n    // Modern browsers - animations will work\n  } else {\n    // Fallback for older browsers - make everything visible\n    document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right').forEach(el => {\n      el.classList.add('fade-in--visible', 'slide-in-left--visible', 'slide-in-right--visible')\n    })\n  }\n} "],"names":["constructor","__publicField","this","navLinks","document","querySelectorAll","sections","init","setupSmoothScrolling","setupActiveNavigation","forEach","link","addEventListener","e","preventDefault","href","getAttribute","startsWith","target","querySelector","scrollIntoView","behavior","block","history","pushState","observer","IntersectionObserver","entries","entry","isIntersecting","id","updateActiveNavLink","rootMargin","threshold","section","observe","activeId","classList","remove","add","animatedElements","animateElement","unobserve","observeElements","element","contains","style","opacity","transform","addStaggeredAnimation","parent","parentElement","index","Array","from","children","filter","child","indexOf","transitionDelay","triggerAnimation","selector","form","submitButton","_a","originalButtonText","_b","textContent","handleSubmit","bind","setupValidation","input","validateField","clearFieldError","field","value","trim","isValid","errorMessage","required","getFieldLabel","type","test","name","length","showFieldError","label","message","existingError","errorElement","createElement","className","color","fontSize","marginTop","appendChild","inputs","isFormValid","setLoadingState","formData","FormData","fetch","action","method","body","headers","Accept","ok","Error","showFormMessage","reset","trackFormSubmission","error","console","loading","disabled","existingMessage","messageElement","padding","borderRadius","textAlign","backgroundColor","border","setTimeout","status","window","gtag","form_name","analytics","isProduction","location","hostname","loadGoogleAnalytics","trackPageView","GA_MEASUREMENT_ID","script","async","src","head","gtagScript","innerHTML","track","page_title","title","page_location","eventName","parameters","log","trackNavigation","section_name","timestamp","Date","toISOString","trackCTA","buttonName","button_name","button_location","trackProjectClick","projectName","linkType","project_name","link_type","trackContact","contact_method","trackScrollDepth","percentage","scroll_percentage","trackTimeOnPage","startTime","now","timeSpent","Math","round","time_seconds","substring","button","buttonText","closest","includes","maxScrollDepth","scrollTop","pageYOffset","docHeight","offsetHeight","innerHeight","scrollPercent","performanceMonitor","measureCoreWebVitals","trackResourceLoading","monitorLongTasks","measureLCP","measureFID","measureCLS","PerformanceObserver","list","getEntries","lastEntry","lcp","reportMetric","disconnect","entryTypes","warn","fid","processingStart","buffered","clsValue","clsEntries","hadRecentInput","push","reportCLS","navigation","performance","getEntriesByType","dnsTime","domainLookupEnd","domainLookupStart","connectTime","connectEnd","connectStart","ttfb","responseStart","requestStart","dcl","domContentLoadedEventEnd","navigationStart","loadComplete","loadEventEnd","duration","metric","url","sendToAnalytics","metric_name","metric_value","custom_parameter_url","measureCustom","measurePaintTiming","replace","monitorMemoryUsage","memory","setInterval","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","mark","event","reason","documentElement","el","initializeApp"],"mappings":"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"}